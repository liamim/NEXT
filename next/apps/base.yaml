initExp:
  description: Dictionary for initialization of experiment.
  args:
    app_id:
      description: The ID of the application
      type: str
    args:
      description: Arguments for initExp
      type: dict
      values:
        alg_list:
          description: A list of algorithms you plan to use in this experiment.
          type: list
          values:
            type: dict
            description: An entry for each algorithm
            values:
              alg_id:
                description: A supported algorithm type in the system.
                type: str
              alg_label:
                description: A name for this algorithm of your choosing.
                type: str
              params:
                description: Any additional algorhtm-specific parameters
                type: any
                optional: true
        instructions:
          description: The instructions the particpant will see when experiment first launched.
          type: str
          default: Please select, using your mouse or left and right arrow keys, the item on the bottom that is closest to the top.
          optional: true

        debrief:
          description: The message that the participant will see when done with the experiment.
          type: str
          default: Thank you for participating
          optional: true

        num_tries:
          description: The number of queries the participant will answer.
          type: num
          default: 25
          optional: true

        algorithm_management_settings:
          description: How individual algorithms are selected.
          type: dict
          values:
            mode:
              description: Currently, 'fixed_proportions' is the only implement mode and a probability of an algorithm being drawn has to be selected.
              type: str
              values: [fixed_proportions]
            params:
              description: (note; documentation for 'mode=fixed_proportions'). Parameters to help select an algorithm.
              type: list
              values:
                description: List of proportions per app type. Note; must be positive and the sum of 'proportions' must add up to 1.
                type: dict
                values:
                  alg_label:
                    description: An alg label, matching one of the ones declared in alg_list.
                    type: str
                  proportion:
                    description: Proportion of queries to give to this algorithm.
                    type: num

        participant_to_algorithm_management:
          description: How many algorithms does one participant see? (i.e., "one-to-many" means one participant sees many different algorithms).
          type: str
          values: [one_to_one, one_to_many]

getQuery:
  description: 'A request to ask the query: "is {center} more similar to {left} or {right}?"'
  args:
    exp_uid:
      description: The experiment unique identifier.
      type: str

    args:
      description: Arguments for initExp
      type: dict
      values:
        participant_uid:
          description: unique identifier of session for a participant answering questions, if key non-existant particpant_uid is assigned as exp_uid.
          type: str
          optional: true
        widget:
          description: whether to send widget html or json response
          type: boolean
          default: false

processAnswer:
  description: reporting back the reward of pulling the arm suggested by getQuery
  args:
    exp_uid:
      description: The experiment unique identifier.
      type: str

    args:
      description: Arguments for initExp
      type: dict
      values:
        query_uid:
          description: The unique identifier for the query.
          type: str
        response_time:
          description: The time taken for the participant to answer the query.
          type: num
        timestamp_answer_received:
          description: The time the answer was recieved. Added by the NEXT Broker and should not be inputted by user.
          type: str

getModel:
  description: Make a prediction from a specific alg
  args:
    exp_uid:
      description: The experiment unique identifier.
      type: str
    args:
      description: getModel args.
      type: dict
      values: 
        alg_label:
          description: alg_label of algorithm making the call
          type: str

getStats:
  description: getStats yeahhhh!
  args:
    exp_uid:
      description: The experiment unique identifier.
      type: str
    args:
      description: args
      type: dict
      values:
        stat_id:
          description: stat_id
          type: str
        params:
          description: params
          type: dict
          values:
            alg_label:
              description: alg_label
              type: str
              optional: true
            task:
              description: task
              type: str
              optional: true

