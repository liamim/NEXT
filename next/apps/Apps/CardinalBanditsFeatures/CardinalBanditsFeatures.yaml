initExp:
  description: Dictionary for initialization of experiment.
  type: dict
  values:
    app_id:
      description: CardinalBanditsFeatures
      type: str
      values: [CardinalBanditsFeatures]
    args:
      description: Arguments for to help create the experiment.
      type: dict
      values:
        features:
          type: matrix
          values: []
          description: algorithm specific parameters. We have taken this to be a matrix with column i to be feature i.
        failure_probability:
          description: Confidence of result.
          type: num
        feature_filenames:
          description: We (optionally) collect a bunch of feature vectors. This parameter is a list of filenames corresponding to which column in the matrix of feature vectors correspond.
          type: list
          optional: true
          values:
            type: str
            description: Names of the features for each column
        rating_scale:
          description: Each target will be rated by a numerical score. In some applications the returned number comes from some process that generates some number between [-1,1], for instance. Alternatively, people may not be inputting numerical scores but picking one of a finite number of options encoded by a number (i.e. ("unfunny",0.0),("somewhat funny",0.5),("funny",1.0))
          type: oneof
          values:
            scale_parameter:
              description: sub-Gaussian parameter, e.g. E[exp(t*X)]<=exp(t^2 R^2/2), defaults to R=0.5 (satisfies X \in [0,1])
              type: num
            labels:
              description: List of dictionaries with label and reward keys, (i.e. [{'label':'unfunny','reward':0.},{'label':'somewhat funny','reward':0.5},{'label':'funny','reward':1.}])
              type: list
              values: []

        participant_to_algorithm_management:
          description: How many algorithms does one participant see? (i.e., "one-to-many" means one participant sees many different algorithms).
          type: str
          values: [one_to_one, one_to_many]

        alg_list:
          description: A list of algorithms you plan to use in this experiment.
          type: list
          values:
            type: dict
            description: An entry for each algorithm
            values:
              alg_id:
                description: A supported algorithm type in the system.
                type: str
                values: [RoundRobin,LilUCB,OFUL]
              alg_label:
                description: A name for this algorithm of your choosing.
                type: str
              params:
                type: matrix
                values: []
                description: algorithm specific parameters. We have taken this to be a matrix with column i to be feature i.
                optional: true

        instructions:
          description: The instructions the particpant will see when experiment first launched.
          type: str
          default: Please select a shoe that you like.

        query_instructions:
          description: The instructions the particpant will see when experiment first launched.
          type: str
          default: Is this shoe close to the first shoe that you chose?

        debrief:
          description: The message that the participant will see when done with the experiment.
          type: str
          default: Thank you for participating
          optional: true


        algorithm_management_settings:
          description: How individual algorithms are selected.
          type: dict
          values:
            mode:
              description: Currently, 'fixed_proportions' is the only implement mode and a probability of an algorithm being drawn has to be selected.
              type: str
              values: [fixed_proportions]
            params:
              description: (note; documentation for 'mode=fixed_proportions'). Parameters to help select an algorithm.
              type: list
              values:
                description: List of proportions per app type. Note; must be positive and the sum of 'proportions' must add up to 1.
                type: dict
                values:
                  alg_label:
                    description: An alg label, matching one of the ones declared in alg_list.
                    type: str
                  proportion:
                    description: Proportion of queries to give to this algorithm.
                    type: num
        R:
          description: sub-Gaussian parameter, e.g. E[exp(t*X)]<=exp(t^2 R^2/2), defaults to R=0.5 (satisfies X \in [0,1])
          type: num
          default: 0.5
          optional: true

        num_tries:
          description: The number of queries the participant will answer.
          type: num
          default: 25
          optional: true

        context_type:
          description: What type of content will the participant see every query? An image, video or text?
          values: [image, text, video]
          type: str
          optional: true

        context:
          description: The URL of the image/video or text of the context.
          type: str
          optional: true

        targets:
          description: targets
          type: oneof
          values:
            n:
              description: Number of items.
              type: num

            targetset:
              description: A target set.
              type: targetset
              values: []

getQuery:
  description: 'A request to ask the query: "which do you prefer? The {left} or {right}?'
  type: dict
  values:
    exp_uid:
      description: The experiment unique identifier.
      type: str

    args:
      description: Arguments for getQuery
      type: dict
      values:
        participant_uid:
          description: unique identifier of session for a participant answering questions, if key non-existant particpant_uid is assigned as exp_uid.
          type: str
          optional: true
        widget:
          description: whether to send widget html or json response
          type: boolean
          default: false

          
processAnswer:
  description: reporting back the reward of pulling the arm suggested by getQuery
  type: dict
  values:
    exp_uid:
      description: The experiment unique identifier.
      type: str

    args:
      description: Arguments for processAnswer
      type: dict
      values:
        initial_query:
          description: Is this the first 
          type: boolean
          default: false
        answer:
          description: Either the initial arm or the reward for a given arm
          type: oneof
          values:
            target_reward:
              description: The reward of the target.
              type: num
            initial_arm:
              description: The index of the initial arm.
              type: num
        query_uid:
          description: The unique identifier for the query.
          type: str
        response_time:
          description: The time taken for the participant to answer the query.
          type: num
        timestamp_answer_received:
          description: The time the answer was recieved. Added by the NEXT Broker and should not be inputted by user.
          type: str
          
getModel:
  description: Make a prediction from a specific alg
  type: dict
  values:
    exp_uid:
      description: The experiment unique identifier.
      type: str
    args:
      description: getModel args.
      type: dict
      values: 
        alg_label:
          description: alg_label of algorithm making the call
          type: str
        logging:
          description: whether you want this logged in app_id:APP-EVALUATION
          type: boolean
          default: false

getStats:
  description: The dashboard displays these stats along with the defaults.
  type: dict
  values:
    exp_uid:
      description: The experiment unique identifier.
      type: str
    args:
      description: args
      type: dict
      values:
        stat_id:
          description: Which function to call? This function is found in the file ./dashboard/dashboard.py.
          type: str
        params:
          description: params
          type: dict
          values:
            alg_label:
              description: Which algorithm are these stats for?
              type: str
              optional: true
            task:
              description: Stats for this process (e.g., getQuery) are obtained
              type: str
              optional: true
            
