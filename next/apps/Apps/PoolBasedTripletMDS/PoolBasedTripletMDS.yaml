initExp:
  description: Dictionary for initialization of experiment.
  type: dict
  values:
    app_id:
      description: PoolBasedTripletMDS
      type: str
      values: [PoolBasedTripletMDS]
    args:
      description: Arguments for initExp
      type: dict
      values:
        d:
          description: Dimension of embedding.
          type: num
          values: []

        failure_probability:
          description: Confidence of result.
          type: num
          values: []

        context:
          description: Context for this experiment
          type: target
          values: []
          optional: true

        alg_list:
          description: A list of algorithms you plan to use in this experiment.
          type: list
          values:
            alg_id:
              description: A supported algorithm type in the system.
              type: str
              values: [CrowdKernel, RandomSampling, STE, UncertaintySampling]
            alg_label:
              description: A name for this algorithm of your choosing.
              type: str
              values: []
            test_alg_label:
              description: Which algorithm to test against.
              type: str
              values: []

        instructions:
          description: The instructions the particpant will see when experiment first launched.
          type: str
          values: [Please select, using your mouse or left and right arrow keys, the item on the bottom that is closest to the top.]

        debrief:
          description: The message that the participant will see when done with the experiment.
          type: str
          values: [Thank you for participating]

        num_tries:
          description: The number of queries the participant will answer.
          type: num
          values: [100]

        algorithm_management_settings:
          description: How individual algorithms are selected.
          type: dict
          values:
            mode:
              description: How are the algorithms selected? Currently, 'fixed_proportions' is the only implement mode and a probability of an algorithm being drawn has to be selected.
              type: str
              values: [fixed_proportions]
            params:
              description: (note; documentation for 'mode=fixed_proportions'). Parameters to help select an algorithm.
              type: dict
              values:
                proportions:
                  description: List of proportions per app type. Note; must be positive and the sum of 'proportions' must add up to 1.
                  type: list
                  values:
                    alg_label:
                      description: An alg label, matching one of the ones declared in alg_list.
                      type: str
                      values: []
                    proportion:
                      description: Proportion of queries to give to this algorithm.
                      type: num
                      values: []

        participant_to_algorithm_management:
          description: How many algorithms does one participant see? (i.e., "one-to-many" means one participant sees many different algorithms).
          type: str
          values: [one-to-one, one-to-many]

        targets:
          description: targets
          type: oneof
          values:
            n:
              description: Number of items.
              type: num
              values: []

            targetset:
              description: A target set.
              type: targetset
              values: []

getQuery:
  description: 'A request to ask the query: "is {center} more similar to {left} or {right}?"'
  type: dict
  values:
    exp_uid:
      description: The experiment unique identifier.
      type: str
      values: []

    exp_key:
      description: The experiment access key.
      type: str
      values: []

    args:
      participant_uid:
        description: unique identifier of session for a participant answering questions, if key non-existant particpant_uid is assigned as exp_uid.
        type: str
        optional: true
        values: []

processAnswer:
  description: reporting back the reward of pulling the arm suggested by getQuery
  type: dict
  values:
    exp_uid:
      description: The experiment unique identifier.
      type: str
      values: []

    exp_key:
      description: The experiment access key.
      type: str
      values: []

    args:
      target_winner:
        description: The ID of the target that won the given query.
        type: str
        values: []

      query_uid:
        description: The unique identifier for the query.
        type: str
        values: []

      response_time:
        description: The time taken for the participant to answer the query.
        type: num
        values: []

